Algorithm BFS_with_Fuel_Constraint
Input: start_node, destination_node, map, time_commitment, fuel_capacity
Output: Shortest path that satisfies the delivery time and fuel constraints or failure

Initialize queue
Initialize 4D array distance with dimensions (num_rows, num_cols, time_commitment+1, fuel_capacity+1) and set all values to infinity
Initialize 4D array trace with dimensions (num_rows, num_cols, time_commitment+1, fuel_capacity+1) and set all values to None
Add start_node to queue with initial state (0, start_node.x, start_node.y, 0, fuel_capacity)
Set distance[start_node.x][start_node.y][0][fuel_capacity] = 0

While queue is not empty do
    Dequeue the front element (current_distance, current_x, current_y, current_time, current_fuel)
    If (current_x, current_y) is the destination_node and current_time <= time_commitment then
        Return trace and terminate search

    For each next_move in map.get_neighbors(current_x, current_y) do
        next_x, next_y = next_move coordinates
        If not map.is_within_boundaries(next_x, next_y) then
            Continue to the next iteration

        Calculate move_time = 1
        If map.is_toll_booth(current_x, current_y) then
            move_time += map.get_toll_time(current_x, current_y)

        new_time = current_time + move_time
        If new_time > time_commitment then
            Continue to the next iteration

        new_fuel = current_fuel - 1
        If new_fuel < 0 then
            Continue to the next iteration

        If map.is_fuel_station(next_x, next_y) then
            new_fuel = fuel_capacity
            new_time += map.get_refuel_time(next_x, next_y)

        new_distance = current_distance + 1
        If new_distance < distance[next_x][next_y][new_time][new_fuel] then
            Update distance[next_x][next_y][new_time][new_fuel] = new_distance
            Update trace[next_x][next_y][new_time][new_fuel] = (current_x, current_y, current_time, current_fuel)
            Enqueue (new_distance, next_x, next_y, new_time, new_fuel)

Return failure if queue is empty and destination is not reached
